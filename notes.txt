                                                                                       .git
                                                                                       |
                                                                                       |
                                                                                       |
                                  ------------------------------------------------------------------------------------------------------------
                                  |                                                     |             |          | 
                                  refs                                                  objects       logs       hooks 
                                  |                                                     | 
                                  |                                                     |
                                  |                                                     |
                                  |                                                     |
                       ------------------------                               -----------------
                       |          |           |                               |                |
                       |          |           |                               commit_folder    |
                       |          |           |                               *compressed_content.txt 
                       heads      remotes     tags                                             |
                       |          |           |                                                | 
                       |          |           |                                                | 
                       |          |           |                                                |
            *this contains        |           immutable branches]                              |
            all branches,         |                                                            |
            pointing to the       |                                                            |
            latest commits        |                                                            oa [894354395438.txt]
                                  |
            * master              |
            * dev                 |
                                  *contains remotes along with branches 
                                  |
                                  |
                                  |
                                  origin
                                  |
                                  * master
                                  * dev









note := objects
The objects folder has multiple sub folders, each folder has a text file in it 
Each folder is named the first two characters of the sha-1 hash, for example
A commit that has the sha1-hash id of 2f3489732929342398234, will be stored in the object as this:
a folder -> blob_file -> compressed_content and would look more like this:
          
            2f
            |
            |
            |
            f3489732929342398234
            {*compressed content*}

The compressed content is a z-lib compression algorithm where it can be descompressed using a python library, z-lib, which is also a default package in go.
In cases where there will be two blob files, the second file usually means:
- a sub folder has been made inside this directory
- and the content inside this file is a pointer to that file 
- heres the sha-1 hash id: a334326892348234423

And in this same object folder, you will find the folder following the previous object provided.
              
            2f
            |
            |
            |
            f3489732929342398234
            ux023428341231147569
            *->pointer to sub folder ->a334326892348234423
-----------------------------------------------------------------------------------
            a3 (this is called a tree object)
            |
            |
            |
            34326892348234423
            {*compressed content}

logs := folder
This folder is basically a replica of the the refs folder, but it contains all its commit history, its folder is 
relative to this structure:
            logs
            |
            |
  -----------------------------------------------
  |                                             |
  |                                             |
  |                                             |
  refs                                          HEAD
  -----------------------------------
  |                                 |
  |                                 |
  |                                 |
  master, fern, dev                 remotes 
  {                                       |
  contains all commit logs                |
  on a branch which is usually            |
  monitored by the HEAD pointer           |
  }                                       |
                                          |
                                          |
                                          |
                                          |
                                          origin, other-remotes
                                          {logs of push and pulls??}



COMMITS 
Now that we have branches and headers configured, we also need to change the commits feature along side with it.
With the current structure, it just does that at run time and reads to text files. But you see, since i want to start commiting, 
these are the steps i'd need to go through -->
1. CHECK HEADER FILE
 Upon new commit, first check the what the header is pointing to

2. LOCATE THE BRANCH 
After getting the current branching, it will always look like this : 
          ref : ref/headers/master
Now we, need to locate this branch in the log folder as 
          logs/headers..>refs/master
and append the new commit to the master.txt file there

3. TAKE SNAPSHOT
Well, this should technically be step2, but this is according to how Im developing, starting with the structure as the trees and blobs will be in hindsight
the last thing to do, shoudln't be that complex (hopefully) 04:26am Tuesday, 2025 April

4. STORE IN OBJECT FOLDER 
The snapshot is then stored in the object folder with the previous naming convention as iterated earilier inside the file, but for storage persistence, we'll go through it again, quickly.

      go run main.go --commit "breakdown"

      >> commit := Commmit {
        parent: previousCommit || 00000000000,
        sha1-id: db_834343423835,
        msg: "breakdown",
      }


      [read HEAD.txt]
      >> ref: refs/heads/master

      [updating|overwriting branch to point to latest commit]
      >> db_834343423835

      [updating branch history]
      > logs/refs/head/master.txt
      >> 0000000000 db_834343423835 breakdown persona-mp3  < vujade@tokyo.mjpeg.com > 04:33 AM UTC 000 TUESDAY....


      [store content in object folder]
      > object
      >+ db 
      // remember, the folder name is the first two characters of the sha1-id, and the name of the particular file is the rest
      >++_83434342835
      >> [COMPRESSED CONTENT USING ZLIB]






SUMMARY
- check header.txt
- go to logs and update the branch file with sha1-id 
- update branch.txt to commit sha1-1




NEW PROBLEM
So we need to be able to identify the parent commit. there are two cases we need to take into consideration
i. If this commit is the first commit in the file, and then we can assign it a parent of 000000000000

ii. While there are other commits, we need to get this commit by:
- readig the entire file and getting the last commitId
- creating a temporary cache??
- creating a json file that just contains the commitId of the last one
-orrr, we could just get the latest commit from the branch file and use it as the parent for the new one, so the inner working will go like this:-->
              go run main.go --commit "parent_feat"

              /* check the branches commit before updating it, so reading file 
              * sha1,err := os.Open("path/to/branch")
              * scanner := bufio.NewScanner(sha1) 
              * var latest_commit string
              * for scanner.Scan(){latest_commit := scanner.Text()}
              * if latest_commit === "" {that means its the first commit, so commit.Parent === 0000000 // read this into the HashId struct}
              * else:
              * commit.Parent = latest_commit // REM: after reading it to a struct




NEW PROBLEM
Making a staging area, while I puposely neglected this feature in the begining, I kind of see very important it is in gits architecture. I just finished playing with file compression in Pyton and for now, its kind f straigt foward using LZMA but just for individual files not a whole folder.

so now that i want to develop the staging area, this is how i think it works
1. it has something like a temporary live queue that knows what isnt added for tracking and what is added for tracking, thats why anytime you run:
      ```git status```

You get to see fies not tracked, and files tracked.

2. When you do git add, you literally add to that queue or list
3. And then when commited, the compression takes place based on what was added, and what was included in the gitignore file


So this is how i think i should do it ->
Since git always knows whats its tracking and who is not been tracked, we could have a file that acts as a checklist with all names of folders and files <broken down later>
And then when we say ```go run main.go add .```  -> we just add all current file names to the list
And then we we say ```go run main.go commit ``` -> we then compress whats on that list, 

**But thats a pretty long process if you think about it, reading from file and all that,

UPDATE:
Messed around inside git folders and I was able to find the index file. It follows the same principles proposed earlier, the only difference is that it's contents are compressed by gits cusom binary tree

Go into ./.git/index and run `cat index`, you'll see some weird shit too, thats the binary format
And then going back into your working directory ->
    ``` git ls-files --stage```
    And you'll basically see the stalker
    10063 hahsCode index filename.txt
    10063 hahsCode index filename2.txt
    10063 hahsCode index filename3.txt
    10063 hahsCode index filename4.txt

While surpisingly, i was able to get the docs, it was so verbosed but i got the general idea, and it validates with the previous concept I had about it, but another foresight I have been thinling abour is building the TREE, for over a couple months, I imagined it to be the hardest, but thats for later concerns.

    10064 -> File Permisson
    index -> used in merges

* go run main.go add . -> 
    - Read all file name in current directory recusrively
    - Write them to a file
    - defer f.Close()


